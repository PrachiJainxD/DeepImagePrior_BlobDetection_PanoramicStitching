# -*- coding: utf-8 -*-
"""Copy of Copy of 1_4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WxDXGPv8r0DWzRoZ3G0pCWRnG1xMQU4X
"""

import numpy as np
import matplotlib.pyplot as plt
import os
import cv2
from scipy import ndimage

image1 = np.ones((300,300,3))
image2 = np.ones((300,300,3))

center_cordinates = (150,150)
radius = 100
color = (0, 0, 250)
thickness = -1
image1 = cv2.circle(image1, center_cordinates, radius, color, thickness)
image2 = cv2.circle(image2, center_cordinates, radius, color, thickness)

plt.imshow(image1)
plt.title('Circle with radius: 100 and center: (150,150)')
plt.show()

plt.imshow(image2)
plt.title('Circle with radius: 100 and center: (150,150)')
plt.show()

#scale-normalized Laplacian
num_figures = 200
fig, axes = plt.subplots(20,10, figsize=(80,160))
nlsigma = []
sigma = 100/np.sqrt(2)
sigmas = []
for i in range(20):
    for j in range(10):
        response = np.power(sigma, 2)*ndimage.gaussian_laplace(image1, sigma)
        nlsigma.append(max(response[150,150,0],response[150,150,1],response[150,150,2]))
        axes[i][j].imshow(response)
        axes[i][j].set_title("Normalised Laplacian Sigma = {}".format(round(sigma,2)))
        sigmas.append(sigma)
        sigma = sigma/np.sqrt(2)

#Gaussian
num_figures = 200
fig, axes = plt.subplots(20,10, figsize=(80,160))
gsigma =[]
sigma = 100/np.sqrt(2)
sigmas = []
for i in range(20):
    for j in range(10):
        response = ndimage.gaussian_filter(image2, sigma)
        gsigma.append(max(response[150,150,0],response[150,150,1],response[150,150,2]))
        axes[i][j].imshow(response)
        axes[i][j].set_title("Gaussian: Sigma = {}".format(round(sigma,2)))
        sigmas.append(sigma)
        sigma = sigma/np.sqrt(2)

plt.plot(sigmas, nlsigma, label = "Scale-Normalized Laplacian Response")
plt.plot(sigmas, gsigma, label = "Gaussian Response")
plt.xlabel('sigma')
plt.ylabel('Responses')
plt.title('Responses as a function of Ïƒ at circle center')
plt.grid(which='major')
plt.grid(which='minor')
plt.minorticks_on()
plt.legend()
plt.show()